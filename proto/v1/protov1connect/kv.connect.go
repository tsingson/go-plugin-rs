// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/v1/kv.proto

package protov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tsingson/grpcplugin/proto/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KvServiceName is the fully-qualified name of the KvService service.
	KvServiceName = "proto.v1.KvService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KvServiceGetProcedure is the fully-qualified name of the KvService's Get RPC.
	KvServiceGetProcedure = "/proto.v1.KvService/Get"
	// KvServicePutProcedure is the fully-qualified name of the KvService's Put RPC.
	KvServicePutProcedure = "/proto.v1.KvService/Put"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	kvServiceServiceDescriptor   = v1.File_proto_v1_kv_proto.Services().ByName("KvService")
	kvServiceGetMethodDescriptor = kvServiceServiceDescriptor.Methods().ByName("Get")
	kvServicePutMethodDescriptor = kvServiceServiceDescriptor.Methods().ByName("Put")
)

// KvServiceClient is a client for the proto.v1.KvService service.
type KvServiceClient interface {
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Put(context.Context, *connect.Request[v1.PutRequest]) (*connect.Response[v1.PutResponse], error)
}

// NewKvServiceClient constructs a client for the proto.v1.KvService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKvServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KvServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &kvServiceClient{
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+KvServiceGetProcedure,
			connect.WithSchema(kvServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		put: connect.NewClient[v1.PutRequest, v1.PutResponse](
			httpClient,
			baseURL+KvServicePutProcedure,
			connect.WithSchema(kvServicePutMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// kvServiceClient implements KvServiceClient.
type kvServiceClient struct {
	get *connect.Client[v1.GetRequest, v1.GetResponse]
	put *connect.Client[v1.PutRequest, v1.PutResponse]
}

// Get calls proto.v1.KvService.Get.
func (c *kvServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Put calls proto.v1.KvService.Put.
func (c *kvServiceClient) Put(ctx context.Context, req *connect.Request[v1.PutRequest]) (*connect.Response[v1.PutResponse], error) {
	return c.put.CallUnary(ctx, req)
}

// KvServiceHandler is an implementation of the proto.v1.KvService service.
type KvServiceHandler interface {
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Put(context.Context, *connect.Request[v1.PutRequest]) (*connect.Response[v1.PutResponse], error)
}

// NewKvServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKvServiceHandler(svc KvServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kvServiceGetHandler := connect.NewUnaryHandler(
		KvServiceGetProcedure,
		svc.Get,
		connect.WithSchema(kvServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kvServicePutHandler := connect.NewUnaryHandler(
		KvServicePutProcedure,
		svc.Put,
		connect.WithSchema(kvServicePutMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.v1.KvService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KvServiceGetProcedure:
			kvServiceGetHandler.ServeHTTP(w, r)
		case KvServicePutProcedure:
			kvServicePutHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKvServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKvServiceHandler struct{}

func (UnimplementedKvServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.KvService.Get is not implemented"))
}

func (UnimplementedKvServiceHandler) Put(context.Context, *connect.Request[v1.PutRequest]) (*connect.Response[v1.PutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.KvService.Put is not implemented"))
}
